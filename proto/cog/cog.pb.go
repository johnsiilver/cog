// Code generated by protoc-gen-go.
// source: cog.proto
// DO NOT EDIT!

/*
Package cog is a generated protocol buffer package.

It is generated from these files:
	cog.proto

It has these top-level messages:
	Args
	Out
	Description
	Server
	ExecuteRequest
	ExecuteResponse
	DescribeRequest
	DescribeResponse
	ValidateRequest
	ValidateResponse
*/
package cog

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Status int32

const (
	// The status hasn't been processed yet.
	Status_UNKNOWN Status = 0
	// Indicates that the execution was considered a success.
	Status_SUCCESS Status = 1
	// Indicates that execution had a failure, but could be retried.
	Status_FAILURE Status = 2
	// Plugin failed and should not be retried.
	Status_FAILURE_NO_RETRIES Status = 3
)

var Status_name = map[int32]string{
	0: "UNKNOWN",
	1: "SUCCESS",
	2: "FAILURE",
	3: "FAILURE_NO_RETRIES",
}
var Status_value = map[string]int32{
	"UNKNOWN":            0,
	"SUCCESS":            1,
	"FAILURE":            2,
	"FAILURE_NO_RETRIES": 3,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}
func (Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ArgsType int32

const (
	// The arguements are encoded in an unknown format.
	ArgsType_AT_UNKNOWN ArgsType = 0
	// The arguments will be encoded in JSON format.
	ArgsType_JSON ArgsType = 1
)

var ArgsType_name = map[int32]string{
	0: "AT_UNKNOWN",
	1: "JSON",
}
var ArgsType_value = map[string]int32{
	"AT_UNKNOWN": 0,
	"JSON":       1,
}

func (x ArgsType) String() string {
	return proto.EnumName(ArgsType_name, int32(x))
}
func (ArgsType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Args struct {
	// The textual encoding of the arguments.  No matter what the type is, it must
	// be textual encoded, never binary encoded.  These arguments are always
	// translated to a binary proto in the plugin.
	ArgsType ArgsType `protobuf:"varint,1,opt,name=args_type,json=argsType,enum=cog.ArgsType" json:"args_type,omitempty"`
	// The arguments to the plugin.  This will be some textual representation of
	// the plugin's protocol buffer.
	Args []byte `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty"`
}

func (m *Args) Reset()                    { *m = Args{} }
func (m *Args) String() string            { return proto.CompactTextString(m) }
func (*Args) ProtoMessage()               {}
func (*Args) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Out struct {
	// The status for a run of the cog.
	Status Status `protobuf:"varint,1,opt,name=status,enum=cog.Status" json:"status,omitempty"`
	// The type of textual encoding used on the output.  This will be the same
	// as the encoding of the input.
	ArgsType ArgsType `protobuf:"varint,2,opt,name=args_type,json=argsType,enum=cog.ArgsType" json:"args_type,omitempty"`
	// The output from the cog in ArgsType textual encoding.
	Output []byte `protobuf:"bytes,3,opt,name=output,proto3" json:"output,omitempty"`
}

func (m *Out) Reset()                    { *m = Out{} }
func (m *Out) String() string            { return proto.CompactTextString(m) }
func (*Out) ProtoMessage()               {}
func (*Out) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// Description is used to describe a Cog. This allows us to
// auto-generate documentation and restrict usage.
type Description struct {
	// This is the owner of the Cog, which should be an email of some sort.
	Owner string `protobuf:"bytes,1,opt,name=owner" json:"owner,omitempty"`
	// This should describe what the plugin does.
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	// Tags are used to provide key words that can be used for searching the
	// plugin data store.
	Tags []string `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty"`
	// This is the maximum time a plugin can take to shutdown before it receives
	// a kill -9. This defaults to 30 seconds and has a maximum value of
	// 30 minutes.  The value is recorded in seconds.
	MaxShutdownTime int32 `protobuf:"varint,7,opt,name=max_shutdown_time,json=maxShutdownTime" json:"max_shutdown_time,omitempty"`
}

func (m *Description) Reset()                    { *m = Description{} }
func (m *Description) String() string            { return proto.CompactTextString(m) }
func (*Description) ProtoMessage()               {}
func (*Description) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// Server details information about the service that called the cog.
type Server struct {
	// Represents a service endpoint that ran the cog.
	Endpoint string `protobuf:"bytes,1,opt,name=endpoint" json:"endpoint,omitempty"`
	// The id of the Labor executing the plugin.
	Id string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *Server) Reset()                    { *m = Server{} }
func (m *Server) String() string            { return proto.CompactTextString(m) }
func (*Server) ProtoMessage()               {}
func (*Server) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// ExecuteRequest holds the request for a Cog to do something.
type ExecuteRequest struct {
	// The arguements to the cog.
	Args *Args `protobuf:"bytes,1,opt,name=args" json:"args,omitempty"`
	// This is the name of the real user account that is trying to run the
	// plugin. As Marmot is the actual caller, this allows the cog to
	// try and pass the user who requested the workflow. The plugin can in turn
	// pass this to remote system if it supports delegation.
	RealUser string `protobuf:"bytes,2,opt,name=real_user,json=realUser" json:"real_user,omitempty"`
	// This provides infomration about gthe server that is executing
	// the cog. This should not be set by the user, as it will just
	// be overwritten.
	Server *Server `protobuf:"bytes,3,opt,name=server" json:"server,omitempty"`
	// A token that identifies the client that started the plugin to the plugin.
	// If a request is sent without this token, the plugin panics.
	Token []byte `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *ExecuteRequest) Reset()                    { *m = ExecuteRequest{} }
func (m *ExecuteRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecuteRequest) ProtoMessage()               {}
func (*ExecuteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ExecuteRequest) GetArgs() *Args {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *ExecuteRequest) GetServer() *Server {
	if m != nil {
		return m.Server
	}
	return nil
}

// ExecuteResponse is the response from the plugin.
type ExecuteResponse struct {
	Out *Out `protobuf:"bytes,1,opt,name=out" json:"out,omitempty"`
}

func (m *ExecuteResponse) Reset()                    { *m = ExecuteResponse{} }
func (m *ExecuteResponse) String() string            { return proto.CompactTextString(m) }
func (*ExecuteResponse) ProtoMessage()               {}
func (*ExecuteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ExecuteResponse) GetOut() *Out {
	if m != nil {
		return m.Out
	}
	return nil
}

// DescribeRequest is a request for the plugin's description.
type DescribeRequest struct {
}

func (m *DescribeRequest) Reset()                    { *m = DescribeRequest{} }
func (m *DescribeRequest) String() string            { return proto.CompactTextString(m) }
func (*DescribeRequest) ProtoMessage()               {}
func (*DescribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

// DescribeResponse holds the description of the plugin.
type DescribeResponse struct {
	Description *Description `protobuf:"bytes,1,opt,name=description" json:"description,omitempty"`
}

func (m *DescribeResponse) Reset()                    { *m = DescribeResponse{} }
func (m *DescribeResponse) String() string            { return proto.CompactTextString(m) }
func (*DescribeResponse) ProtoMessage()               {}
func (*DescribeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DescribeResponse) GetDescription() *Description {
	if m != nil {
		return m.Description
	}
	return nil
}

// ValidateRequest is used to validate the arguments of a request.
type ValidateRequest struct {
	Args *Args `protobuf:"bytes,1,opt,name=args" json:"args,omitempty"`
}

func (m *ValidateRequest) Reset()                    { *m = ValidateRequest{} }
func (m *ValidateRequest) String() string            { return proto.CompactTextString(m) }
func (*ValidateRequest) ProtoMessage()               {}
func (*ValidateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ValidateRequest) GetArgs() *Args {
	if m != nil {
		return m.Args
	}
	return nil
}

// ValidateResponse is the response from a validate request.
type ValidateResponse struct {
}

func (m *ValidateResponse) Reset()                    { *m = ValidateResponse{} }
func (m *ValidateResponse) String() string            { return proto.CompactTextString(m) }
func (*ValidateResponse) ProtoMessage()               {}
func (*ValidateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func init() {
	proto.RegisterType((*Args)(nil), "cog.Args")
	proto.RegisterType((*Out)(nil), "cog.Out")
	proto.RegisterType((*Description)(nil), "cog.Description")
	proto.RegisterType((*Server)(nil), "cog.Server")
	proto.RegisterType((*ExecuteRequest)(nil), "cog.ExecuteRequest")
	proto.RegisterType((*ExecuteResponse)(nil), "cog.ExecuteResponse")
	proto.RegisterType((*DescribeRequest)(nil), "cog.DescribeRequest")
	proto.RegisterType((*DescribeResponse)(nil), "cog.DescribeResponse")
	proto.RegisterType((*ValidateRequest)(nil), "cog.ValidateRequest")
	proto.RegisterType((*ValidateResponse)(nil), "cog.ValidateResponse")
	proto.RegisterEnum("cog.Status", Status_name, Status_value)
	proto.RegisterEnum("cog.ArgsType", ArgsType_name, ArgsType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for CogService service

type CogServiceClient interface {
	// Executes the cog.
	Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error)
	// Describes the cog.
	Describe(ctx context.Context, in *DescribeRequest, opts ...grpc.CallOption) (*DescribeResponse, error)
	// Validate takes an argument for a cog and validates the cog will
	// accept it. If not, it returns an error.
	Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error)
}

type cogServiceClient struct {
	cc *grpc.ClientConn
}

func NewCogServiceClient(cc *grpc.ClientConn) CogServiceClient {
	return &cogServiceClient{cc}
}

func (c *cogServiceClient) Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error) {
	out := new(ExecuteResponse)
	err := grpc.Invoke(ctx, "/cog.CogService/Execute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cogServiceClient) Describe(ctx context.Context, in *DescribeRequest, opts ...grpc.CallOption) (*DescribeResponse, error) {
	out := new(DescribeResponse)
	err := grpc.Invoke(ctx, "/cog.CogService/Describe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cogServiceClient) Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error) {
	out := new(ValidateResponse)
	err := grpc.Invoke(ctx, "/cog.CogService/Validate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CogService service

type CogServiceServer interface {
	// Executes the cog.
	Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error)
	// Describes the cog.
	Describe(context.Context, *DescribeRequest) (*DescribeResponse, error)
	// Validate takes an argument for a cog and validates the cog will
	// accept it. If not, it returns an error.
	Validate(context.Context, *ValidateRequest) (*ValidateResponse, error)
}

func RegisterCogServiceServer(s *grpc.Server, srv CogServiceServer) {
	s.RegisterService(&_CogService_serviceDesc, srv)
}

func _CogService_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CogServiceServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cog.CogService/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CogServiceServer).Execute(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CogService_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CogServiceServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cog.CogService/Describe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CogServiceServer).Describe(ctx, req.(*DescribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CogService_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CogServiceServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cog.CogService/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CogServiceServer).Validate(ctx, req.(*ValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CogService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cog.CogService",
	HandlerType: (*CogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Execute",
			Handler:    _CogService_Execute_Handler,
		},
		{
			MethodName: "Describe",
			Handler:    _CogService_Describe_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _CogService_Validate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("cog.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 548 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x94, 0x5f, 0x8f, 0xd2, 0x4c,
	0x14, 0xc6, 0x29, 0x65, 0xa1, 0x3d, 0x7d, 0x5f, 0xe8, 0x1e, 0x71, 0xd3, 0x60, 0x4c, 0xc8, 0xe8,
	0x05, 0x21, 0x71, 0x63, 0xd0, 0x98, 0x78, 0x49, 0x10, 0xcc, 0xaa, 0x81, 0x64, 0x0a, 0x7a, 0xd9,
	0x74, 0xe9, 0xa4, 0x36, 0x2e, 0x9d, 0xda, 0x99, 0xba, 0xec, 0x07, 0x30, 0x7e, 0x27, 0x3f, 0x9d,
	0xe9, 0x74, 0xf8, 0x7b, 0x61, 0xbc, 0x3b, 0xe7, 0x99, 0x9e, 0xe7, 0x3c, 0xfc, 0x66, 0x02, 0xd8,
	0x6b, 0x1e, 0x5f, 0x67, 0x39, 0x97, 0x1c, 0xcd, 0x35, 0x8f, 0xc9, 0x0c, 0x1a, 0xe3, 0x3c, 0x16,
	0x38, 0x04, 0x3b, 0xcc, 0x63, 0x11, 0xc8, 0x87, 0x8c, 0x79, 0x46, 0xdf, 0x18, 0xb4, 0x47, 0xff,
	0x5f, 0x97, 0xdf, 0x96, 0xa7, 0xcb, 0x87, 0x8c, 0x51, 0x2b, 0xd4, 0x15, 0x22, 0x34, 0xca, 0xda,
	0xab, 0xf7, 0x8d, 0xc1, 0x7f, 0x54, 0xd5, 0x24, 0x05, 0x73, 0x51, 0x48, 0x7c, 0x06, 0x4d, 0x21,
	0x43, 0x59, 0x08, 0xed, 0xe1, 0x28, 0x0f, 0x5f, 0x49, 0x54, 0x1f, 0x9d, 0xee, 0xaa, 0xff, 0x7d,
	0xd7, 0x15, 0x34, 0x79, 0x21, 0xb3, 0x42, 0x7a, 0xa6, 0xda, 0xa6, 0x3b, 0xf2, 0xd3, 0x00, 0xe7,
	0x1d, 0x13, 0xeb, 0x3c, 0xc9, 0x64, 0xc2, 0x53, 0xec, 0xc2, 0x05, 0xbf, 0x4f, 0x59, 0xae, 0xf6,
	0xda, 0xb4, 0x6a, 0xb0, 0x0f, 0x4e, 0x74, 0xf8, 0x48, 0xed, 0xb2, 0xe9, 0xb1, 0x54, 0xfe, 0x16,
	0x19, 0xc6, 0xc2, 0x33, 0xfb, 0xe6, 0xc0, 0xa6, 0xaa, 0xc6, 0x21, 0x5c, 0x6e, 0xc2, 0x6d, 0x20,
	0xbe, 0x16, 0x32, 0xe2, 0xf7, 0x69, 0x20, 0x93, 0x0d, 0xf3, 0x5a, 0x7d, 0x63, 0x70, 0x41, 0x3b,
	0x9b, 0x70, 0xeb, 0x6b, 0x7d, 0x99, 0x6c, 0x18, 0x79, 0x0d, 0x4d, 0x9f, 0xe5, 0x3f, 0x58, 0x8e,
	0x3d, 0xb0, 0x58, 0x1a, 0x65, 0x3c, 0x49, 0xa5, 0x0e, 0xb1, 0xef, 0xb1, 0x0d, 0xf5, 0x24, 0xd2,
	0xeb, 0xeb, 0x49, 0x44, 0x7e, 0x19, 0xd0, 0x9e, 0x6e, 0xd9, 0xba, 0x90, 0x8c, 0xb2, 0xef, 0x05,
	0x13, 0x12, 0x9f, 0x6a, 0xa8, 0xe5, 0xa8, 0x33, 0xb2, 0xf7, 0x3c, 0x2a, 0xbe, 0xf8, 0x04, 0xec,
	0x9c, 0x85, 0x77, 0x41, 0x21, 0x58, 0xae, 0x8d, 0xac, 0x52, 0x58, 0x09, 0x96, 0x2b, 0xea, 0x2a,
	0x84, 0x82, 0xe4, 0xec, 0xa8, 0x2b, 0x89, 0xea, 0xa3, 0x92, 0x90, 0xe4, 0xdf, 0x58, 0xea, 0x35,
	0x14, 0xc8, 0xaa, 0x21, 0x2f, 0xa0, 0xb3, 0x0f, 0x22, 0x32, 0x9e, 0x0a, 0x86, 0x3d, 0x30, 0x79,
	0x21, 0x75, 0x10, 0x4b, 0x59, 0x2d, 0x0a, 0x49, 0x4b, 0x91, 0x5c, 0x42, 0xa7, 0xa2, 0x7e, 0xbb,
	0x0b, 0x4e, 0x66, 0xe0, 0x1e, 0x24, 0x6d, 0x31, 0x3a, 0xe5, 0x5e, 0x59, 0xb9, 0xca, 0xea, 0xe8,
	0xd2, 0x4e, 0x6e, 0x82, 0xbc, 0x84, 0xce, 0xe7, 0xf0, 0x2e, 0x89, 0xc2, 0x7f, 0x65, 0x42, 0x10,
	0xdc, 0xc3, 0x44, 0xb5, 0x79, 0xf8, 0x1e, 0x9a, 0xd5, 0x6b, 0x43, 0x07, 0x5a, 0xab, 0xf9, 0xc7,
	0xf9, 0xe2, 0xcb, 0xdc, 0xad, 0x95, 0x8d, 0xbf, 0x9a, 0x4c, 0xa6, 0xbe, 0xef, 0x1a, 0x65, 0x33,
	0x1b, 0xdf, 0x7c, 0x5a, 0xd1, 0xa9, 0x5b, 0xc7, 0x2b, 0x40, 0xdd, 0x04, 0xf3, 0x45, 0x40, 0xa7,
	0x4b, 0x7a, 0x33, 0xf5, 0x5d, 0x73, 0xf8, 0x1c, 0xac, 0xdd, 0x73, 0xc4, 0x36, 0xc0, 0x78, 0x19,
	0x1c, 0xdc, 0x2c, 0x68, 0x7c, 0xf0, 0x17, 0x73, 0xd7, 0x18, 0xfd, 0x36, 0x00, 0x26, 0x3c, 0x2e,
	0x51, 0x27, 0x6b, 0x86, 0x6f, 0xa0, 0xa5, 0x69, 0xe2, 0x23, 0x95, 0xf6, 0xf4, 0x92, 0x7b, 0xdd,
	0x53, 0xb1, 0xca, 0x4c, 0x6a, 0xf8, 0x16, 0xac, 0x1d, 0x43, 0xec, 0x1e, 0x61, 0xda, 0x53, 0xee,
	0x3d, 0x3e, 0x53, 0x8f, 0x47, 0x77, 0x10, 0xf4, 0xe8, 0x19, 0x45, 0x3d, 0x7a, 0x4e, 0x8a, 0xd4,
	0x6e, 0x9b, 0xea, 0x7f, 0xe0, 0xd5, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x78, 0xdf, 0x47, 0x82,
	0x14, 0x04, 0x00, 0x00,
}
